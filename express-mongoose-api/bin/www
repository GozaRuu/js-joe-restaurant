#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const fs = require('fs');
 const http = require('http');
 const https = require('https');
const app = require('../app');
const debug = require('debug')('express-mongoose-api:server');

const appConfig = require('../config/app.config');


/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = (server) => () => {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
};

/**
 * Get port from the app configuration file and store in Express.
 */

const port = normalizePort(appConfig.port);
app.set('port', port);
app.set('secPort', port + 443)

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create HTTPS secure server.
 */

 const options = {
	 key: fs.readFileSync(__dirname + '/private.key'),
	 cert: fs.readFileSync(__dirname + '/certificate.pem')
 };
 const secureServer = https.createServer(options, app);


/**
 * HTTP server listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening(server));

/**
 * HTTPS secure server listen on provided port, on all network interfaces.
 */


secureServer.listen(app.get('secPort'), () => {
	console.log(`secure server listening on port ${app.get('secPort')}`);
});
secureServer.on('error', onError);
secureServer.on('listening', onListening(secureServer));
